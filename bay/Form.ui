<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.Form.Form" extends="Runtime.Web.Component" 
	module="Runtime.Web.Form" model="Runtime.Web.Form.FormModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Button.Button" component="true" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Form.FormEvent" />
<use name="Runtime.Web.Form.FormModel" />

<style>
%form{
}
%form_row{
	padding-bottom: 15px;
}
%form_row:last-child{
	padding-bottom: 0px;
}
%form_label{
	font-weight: bold;
	padding-bottom: 5px;
}
%form_value{}
%form_value input, %form_value textarea, %form_value select{
	width: 100%;
	padding: 5px 10px;
}
%form_value textarea{
	height: 400px;
}
%form_buttons{
	text-align: center;
}
%form_buttons %(Button)button{
	margin-left: 10px;
	margin-right: 10px;
}
%form_error{
	text-align: center;
	padding-top: 5px;
	color: red;
}
%form_result{
	padding-top: 10px;
	text-align: center;
}
%form_result.success{
	color: green;
}
%form_result.error{
	color: red;
}
</style>


<template name="render">
	<div class="form" @key="form">
		%if (model != null)
		{
			%render
			[
				static::renderHeader(layout, model, params, content),
				static::renderContent(layout, model, params, content),
				static::renderButtons(layout, model, params, content),
				static::renderResult(layout, model, params, content),
				static::renderFooter(layout, model, params, content),
			];
		}
	</div>
</template>


<template name="renderHeader">
</template>


<template name="renderContent">
	%var Collection<string> fields = params["fields"];
	%for (int i=0; i<fields.count(); i++)
	{
		%var string field_name = fields[i];
		%render static::renderRow(layout, model, params, field_name);
	}
</template>


<template name="renderRow" args="LayoutModel layout, FormModel model, Dict params, string field_name">
	%var Dict field = params["struct"][field_name];
	%if (field != null)
	{
		%var string class_name = field["class_name"] |> default string "";
		%var string class_name_form = field["class_name_form"] |> default string "";
		%var Dict class_settings = field["class_settings"] |> default string "";
		%var var model_path = static::getBindPath(field);
		
		<div class='form_row' @key={ field_name }>
			<div class='form_label'>{ field["label"] }:</div>
			<div class='form_value'>
			
				%if (rtl::exists(class_name_form)){ %var class_name = class_name_form; }
				%if (rtl::exists(class_name))
				{
					<{class_name} @bind={ model_path } @event:ChangeEvent="onItemChange"
						used-by="form" name={ field_name } form-item={ model["item"] }
						model-path={ model_path }
						...class_settings
					/>
				}
			</div>
			<div class='form_error'>
				{ static::renderFieldError(model, field_name) }
			</div>
		</div>
	}
</template>


<template name="renderFieldError" args="FormModel model, string field_name">
	%var Collection<string> errors = model["validate"][field_name];
	%if (errors != null)
	{
		%for (int i=0; i<errors.count(); i++)
		{
			%var string s = errors[i];
			<div class='form_error_line'>{ s }</div>
		}
	}
</template>


<template name="renderButtons">
	<div class="form_buttons" @key="buttons">
	%if (params['action'] == "add")
	{
		<Button @event:MouseClickEvent="onButtonClick" data-action="create">Add</Button>
		<Button @event:MouseClickEvent="onButtonClick" data-action="cancel">Cancel</Button>
	}
	%if (params['action'] == "edit")
	{
		<Button @event:MouseClickEvent="onButtonClick" data-action="update">Update</Button>
		<Button @event:MouseClickEvent="onButtonClick" data-action="cancel">Cancel</Button>
	}
	</div>
</template>


<template name="renderResult">
	<div class='form_row form_result' class={ static::getResultClass(model) } @key="result">
		{ model.message }
		{ model.success_message }
		{ model.error_message }
	</div>
</template>


<template name="renderFooter">
</template>



<script type="frontend">

/**
 * Returns result class
 */
pure string getResultClass(FormModel model)
{
	if (model.success_message != "") return "success";
	if (model.error_message != "") return "error";
	return "";
}


/**
 * Returns bind path
 */
pure Collection<string> getBindPath(Dict field) => ["item", field["api_name"]];



/**
 * On item change
 */
async void onItemChange(Message<ChangeEvent> msg)
{
	FormModel model = this.model();
	Dict params = msg.sender.params;
	string field_name = params["name"];
	string value = msg.data.value;
	var model_path = params["model-path"];
	
	FormEvent event = new FormEvent
	{
		"event": FormEvent::ACTION_CHANGE,
		"item": model.item,
		"field_name": field_name,
		"old_value": rtl::attr(model, model_path, null),
		"value": value,
	};
	
	this.update("setAttr", model_path, value);
	await this.signal(event);
}



/**
 * On mouse click
 */
async void onButtonClick(Message<MouseClickEvent> msg)
{
	FormModel model = this.model();
	FormEvent event = new FormEvent
	{
		"item": model.item,
	};
	string data_action = msg.sender.params.get("data-action");
	if (data_action == "create")
	{
		event <= event <= FormEvent::ACTION_CREATE;
		await this.signal(event);
	}
	else if (data_action == "update")
	{
		event <= event <= FormEvent::ACTION_UPDATE;
		await this.signal(event);
	}
	else if (data_action == "cancel")
	{
		event <= event <= FormEvent::ACTION_CANCEL;
		await this.signal(event);
	}
}

</script>

</class>